{"version":3,"sources":["SearchItem.js","App.js","reportWebVitals.js","index.js"],"names":["SearchItem","useState","item","setItem","itemSearched","setItemSearched","itemResults","setItemResults","pagination","setPagination","searchPage","setSearchPage","paginationStorage","JSON","parse","sessionStorage","getItem","itemsStored","savedItem","paginationDisplay","itemLookUp","e","a","preventDefault","url","fetch","result","json","data","results","alert","useEffect","splice","stringify","paginationArray","maxPage","totalPages","maxRight","currentPage","minPage","i","push","unshift","target","value","previousPage","nextPage","className","name","onSubmit","type","placeholder","required","onChange","perPage","map","arr","onClick","src","imageUrl","alt","msrp","price","uid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4223db5c.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\n\nfunction SearchItem () {\n    const [item, setItem] = useState(\"\")\n    const [itemSearched, setItemSearched] = useState(\"\")\n    const [itemResults, setItemResults] = useState(\"\")\n    const [pagination, setPagination] = useState(\"\")\n    const [searchPage, setSearchPage] = useState(\"\")\n\n    const paginationStorage = JSON.parse(sessionStorage.getItem(\"paginationKey\"))\n    const itemsStored = JSON.parse(sessionStorage.getItem(\"itemsKey\")) || []\n    const savedItem = JSON.parse(sessionStorage.getItem(\"searchKey\")) \n    const paginationDisplay = JSON.parse(sessionStorage.getItem(\"paginationDisplayKey\"))\n   \n  \n    // Form submission will call this asyn function to fetch SearchSpring API data and set it to ItemResults and Pagination \n    const itemLookUp = async (e) => {\n        e.preventDefault()\n\n        const url = `https://scmq7n.a.searchspring.io/api/search/search.json?siteId=scmq7n&q=${item}&resultsFormat=native&page=${searchPage || 1} `\n\n        try {\n            const result = await fetch (url)\n            const data = await result.json()\n            setItemResults(data.results)\n            setPagination(data.pagination) \n        }catch(err) {\n            alert(\"Item not found\")\n        }\n        setItemSearched(item !== \"\" ? item : savedItem)\n        \n    }\n\n\n\n    // Updated items stored in session storage\n    useEffect(() => {\n       if (itemResults) {\n        itemsStored.splice(0, 1, itemResults)\n       }\n       sessionStorage.setItem(\"paginationDisplayKey\", JSON.stringify(paginationArray))\n       sessionStorage.setItem(\"itemsKey\", JSON.stringify(itemsStored))\n    },[itemResults, itemsStored, item])\n\n    \n    \n    useEffect(() => {\n        setSearchPage(1)\n    }, [item])\n\n    // Save pagination and searched item in session storage\n    if(itemResults) {\n        sessionStorage.setItem(\"paginationKey\", JSON.stringify(pagination))\n        sessionStorage.setItem(\"searchKey\", JSON.stringify(itemSearched))\n    }\n\n    //Pagination of page will be determind based on what is inside the array below, along with min and max page numbers to be displayed \n    let paginationArray = []\n   \n    \n    if(paginationStorage) {\n        let maxPage = paginationStorage.totalPages\n        let maxRight = paginationStorage.currentPage + 2 \n        let minPage = paginationStorage.currentPage - 2 \n    \n        if (minPage < 1) {\n            minPage = 1\n            maxPage = paginationStorage.totalPages\n        }\n    \n        if (paginationStorage.currentPage === paginationStorage.totalPages) {\n            minPage = paginationStorage.totalPages - 4\n\n            if (minPage < 1) {\n                minPage = 1\n            }\n            maxPage = paginationStorage.totalPages\n        }\n\n\n         // Based on what is in the session storage, push all of the page numbers to the paginationArray\n\n        for(let i = minPage; i <= maxRight; i++) {\n            if (maxRight >= maxPage) {\n                maxRight = paginationStorage.totalPages\n            }\n            paginationArray.push(i)\n        }\n\n        if(paginationStorage.currentPage !== 1) {\n            paginationArray.unshift(\"<\")  \n        }\n\n        if (paginationStorage.currentPage !== paginationStorage.totalPages) {\n            paginationArray.push(\">\")  \n        }        \n    }\n\n    //Function to grab value of button clicked and set it to the page number that is to be searched and displayed \n    function target (e) {\n        if(e.target.value === \"<\") {\n            if(paginationStorage.currentPage === 1) {\n                setSearchPage(1)\n            }else {\n                setSearchPage(paginationStorage.previousPage)\n            }           \n        } else if (e.target.value === \">\") {\n            if(paginationStorage.currentPage === paginationStorage.totalPages) {\n                setSearchPage(paginationStorage.totalPages)\n            }else{\n                setSearchPage(paginationStorage.nextPage)\n            }\n        }else if(e.target.value !== \"<\" || e.target.value !== \">\") {\n            setSearchPage(e.target.value)\n        }\n        setItem(item !== \"\" ? item : savedItem)\n    }\n \n\n    //****PAGE DISPLAY*****//\n\n    if(itemsStored[0]) {\n        return (\n        <div className=\"container\"> \n           <div className=\"form-container\" >\n               <h6 className=\"logo\">SearchSpring</h6>\n               <form name=\"myForm\" className=\"search-form\" onSubmit={itemLookUp}>\n                   <input \n                        type=\"text\" \n                        name=\"item\"\n                        placeholder=\"Search here...\"\n                        className=\"searchInput\"\n                        required \n                        value={item}\n                        onChange= {(e) => setItem(e.target.value)}\n                    /> \n\n                    <button className=\"searchBtn\" type=\"submit\">Search</button>\n               </form>               \n            </div>    \n\n           <div className=\"paginationContainer\"> <h6 className=\"resultAmt\">Showing {paginationStorage.perPage} results</h6> \n                    <form onSubmit={itemLookUp}>\n                        {paginationDisplay.map(arr => (\n                            <>\n                                <button\n                                    key={arr.value}\n                                    type=\"submit\"\n                                    name=\"subBtn\"\n                                    className=\"btn\"\n                                    value={arr}\n                                    onClick={target} \n                                >\n                                    {arr}\n                                </button>\n                                \n                            </>\n                        ))}\n\n                    </form>\n           </div>\n\n    \n           <div className=\"resultDisplay\">\n                    {itemsStored[0].map(item => (\n                        <div className=\"itemCard\">\n                            <div className=\"itemInfo\" key={item.uid}>\n                                <img className=\"itemImg\" src={item.imageUrl} alt=\"Item\"/>\n                                <p className=\"itemName\">{item.name}</p>\n                                {item.msrp > item.price ? <p className=\"itemMsrp\">${item.msrp}.00</p> : null}\n                                <p className=\"itemPrice\">${item.price % 1 !== 0 ? `${item.price}0`: `${item.price}.00`}</p>\n                            </div>\n                        </div>\n                     \n                    ))}\n\n               </div>\n\n               <div className=\"paginationContainer\"> \n                    <form onSubmit={itemLookUp} className=\" bottomPagination\">\n                        {paginationDisplay.map(arr => (\n                            <>\n                                <button\n                                    key={arr.value}\n                                    type=\"submit\"\n                                    name=\"subBtn\"\n                                    className=\"btn\"\n                                    value={arr}\n                                    onClick={target} \n                                >\n                                    {arr}\n                                </button>\n                                \n                            </>\n                        ))}\n\n                    </form>\n           </div>    \n        </div>\n    )\n    }else {\n        return (\n        <div className=\"container\"> \n           <div className=\"form-container\" >\n               <h6 className=\"logo\">SearchSpring</h6>\n               <form name=\"myForm\" className=\"search-form\" onSubmit={itemLookUp}>\n                   <input \n                        type=\"text\" \n                        name=\"item\"\n                        placeholder=\"Search here...\"\n                        className=\"searchInput\"\n                        required \n                        value={item}\n                        onChange= {(e) => setItem(e.target.value)}\n                    /> \n\n                    <button className=\"searchBtn\" type=\"submit\">Search</button>\n               </form>             \n            </div>\n\n            <div className=\"initialMessage\"><p>Let's go shopping!!</p>\n            </div> \n        </div>    \n        )\n    }\n}\n\n\n\n    \n\nexport default SearchItem\n","import React from \"react\";\nimport SearchItem from \"./SearchItem\";\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchItem/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}