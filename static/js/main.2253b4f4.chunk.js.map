{"version":3,"sources":["SearchItem.js","App.js","reportWebVitals.js","index.js"],"names":["SearchItem","useState","item","setItem","itemResults","setItemResults","pagination","setPagination","searchPage","setSearchPage","paginationStorage","JSON","parse","sessionStorage","getItem","itemsStored","itemLookUp","e","a","preventDefault","url","fetch","result","json","data","results","alert","useEffect","splice","stringify","paginationArray","maxPage","currentPage","minPage","totalPages","i","push","target","value","previousPage","className","name","onSubmit","type","placeholder","required","onChange","perPage","map","arr","onClick","src","imageUrl","alt","msrp","price","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2253b4f4.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\n\nfunction SearchItem () {\n    const [item, setItem] = useState(\"\")\n    const [itemResults, setItemResults] = useState(\"\")\n    const [pagination, setPagination] = useState(\"\")\n    const [searchPage, setSearchPage] = useState(\"\")\n\n    const paginationStorage = JSON.parse(sessionStorage.getItem(\"paginationKey\"))\n    const itemsStored = JSON.parse(sessionStorage.getItem(\"itemsKey\")) || []\n   \n  \n    // Form submission will call this asyn function to fetch SearchSpring API data and set it to ItemResults and Pagination \n    const itemLookUp = async (e) => {\n        e.preventDefault()\n\n        const url = `https://scmq7n.a.searchspring.io/api/search/search.json?siteId=scmq7n&q=${item}&resultsFormat=native&page=${searchPage || 1} `\n\n        try {\n            const result = await fetch (url)\n            const data = await result.json()\n            setItemResults(data.results)\n            setPagination(data.pagination)\n            \n        }catch(err) {\n            alert(\"Item not found\")\n        }\n    }\n\n\n    // Updated items stored in session storage\n    useEffect(() => {\n       if (itemResults) {\n        itemsStored.splice(0, 1, itemResults)\n       }\n        sessionStorage.setItem(\"itemsKey\", JSON.stringify(itemsStored))\n        sessionStorage.setItem(\"paginationKey\", JSON.stringify(pagination))\n        \n    },[itemResults, itemsStored, pagination])\n\n    \n\n   \n    //Pagination of page will be determind based on what is inside the array below, along with min and max page numbers to be displayed \n    let paginationArray = []\n\n    if(paginationStorage) {\n        let maxPage = paginationStorage.currentPage + 2\n        let minPage = paginationStorage.currentPage - 2\n    \n        if (minPage < 1) {\n            minPage = 1\n            maxPage = paginationStorage.totalPages\n        }\n    \n        if (maxPage > paginationStorage.totalPages) {\n            minPage = paginationStorage.totalPages - 4\n             \n            if (minPage < 1) {\n                minPage = 1\n            }\n    \n            maxPage = paginationStorage.totalPages\n        }\n\n\n         // Based on what is in the session storage, push all of the page numbers to the paginationArray\n\n        for(let i = minPage; i <= maxPage; i++) {\n            paginationArray.push(i)\n        }\n    }\n\n    //Function to grab value of button clicked and set it to the page number that is to be searched and displayed \n    function target (e) {\n        if(e.target.value === \"<\") {\n            if(paginationStorage.currentPage === 1) {\n                setSearchPage(1)\n            }else {\n                setSearchPage(paginationStorage.previousPage)\n            }           \n        }else if(e.target.value !== \"<\" || e.target.value !== \">\") {\n            setSearchPage(e.target.value)\n        }\n    }\n\n    \n\n\n    // Based on what is in the session storage, push all of the page numbers to the paginationArray\n    if(paginationStorage) {\n        \n\n        // if(paginationStorage.currentPage !== paginationStorage.totalPagespaginationStorage) {\n        //     paginationArray.unshift(\"<\")\n        // }\n\n        // if (paginationStorage.currentPage !== paginationStorage.totalPages) {\n        //     paginationArray.push(\">\")\n        // }\n        \n    }\n\n    //****PAGE DISPLAY*****//\n\n    if(itemResults && itemsStored[0]) {\n        return (\n        <div className=\"container\"> \n           <div className=\"form-container\" >\n               <h6 className=\"logo\">SearchSpring</h6>\n               <form name=\"myForm\" className=\"search-form\" onSubmit={itemLookUp}>\n                   <input \n                        type=\"text\" \n                        name=\"item\"\n                        placeholder=\"Search here...\"\n                        className=\"searchInput\"\n                        required \n                        value={item}\n                        onChange= {(e) => setItem(e.target.value)}\n                    /> \n\n                    <button className=\"searchBtn\" type=\"submit\">Search</button>\n               </form>               \n            </div>    \n\n           <div className=\"paginationContainer\"> <h6>Showing {paginationStorage.perPage} results</h6> \n                    <form onSubmit={itemLookUp} >\n                        {paginationArray.map(arr => (\n                            <>\n                                <button\n                                    type=\"submit\"\n                                    name=\"subBtn\"\n                                    className=\"btn\"\n                                    value={arr}\n                                    onClick={target} \n                                >\n                                    {arr}\n                                </button>\n                                \n                            </>\n                        ))}\n\n                    </form>\n           </div>\n\n    \n           <div className=\"resultDisplay\">\n                    {itemsStored[0].map(item => (\n                        <div className=\"itemCard\">\n                            <div className=\"itemInfo\">\n                                <img className=\"itemImg\" src={item.imageUrl} alt=\"Item\"/>\n                                <p className=\"itemName\">{item.name}</p>\n                                <p className=\"itemMsrp\">${item.msrp}.00</p>\n                                <p className=\"itemPrice\">${item.price}.00</p>\n                            </div>\n                        </div>\n                     \n                    ))}\n\n               </div>\n\n               <div className=\"paginationContainer\"> \n                    <form onSubmit={itemLookUp} >\n                        {paginationArray.map(arr => (\n                            <>\n                                <button\n                                    type=\"submit\"\n                                    name=\"subBtn\"\n                                    className=\"btn\"\n                                    value={arr}\n                                    onClick={target} \n                                >\n                                    {arr}\n                                </button>\n                                \n                            </>\n                        ))}\n\n                    </form>\n           </div>    \n        </div>\n    )\n    }else {\n        return (\n        <div className=\"container\"> \n           <div className=\"form-container\" >\n               <h6 className=\"logo\">SearchSpring</h6>\n               <form name=\"myForm\" className=\"search-form\" onSubmit={itemLookUp}>\n                   <input \n                        type=\"text\" \n                        name=\"item\"\n                        placeholder=\"Search here...\"\n                        className=\"searchInput\"\n                        required \n                        value={item}\n                        onChange= {(e) => setItem(e.target.value)}\n                    /> \n\n                    <button className=\"searchBtn\" type=\"submit\">Search</button>\n               </form>             \n            </div>\n\n            <h1 className=\"initialMessage\">Search for any item!!</h1> \n        </div>    \n        )\n    }\n}\n\n\n\n    \n\nexport default SearchItem\n","import React from \"react\";\nimport SearchItem from \"./SearchItem\";\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchItem/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}